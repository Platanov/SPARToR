" vim: ft=help mouse=a ma noro lbr wrap nu tw=79 fo+=n fo-=croq

------------------------------------------------------------------------------
									 *index*
SPARToR Engine Docs ~

The Frame Buffer ~

The most important data in the engine is 'fr', the frame buffer. It contains
360 frames.

The frame type is FRAME_t. Each frame in 'fr' has:
  .dirty       to indicate if the frame needs to be recalculated
  .realfr      the unmodded sequential frame id number (unused)
  .cmds        commands from each player, 1 per player per frame
  .objs        all the objects in the frame

Commands use FCMD_t and have:
  .cmd         numeric id of the command, e.g. jump, +attack
  .mousehi     high order bits for mouse position
  .mousex      mouse x pos
  .mousey      mouse y pos
  .flags
    CMDF_NEW   set on new client connect
    CMDF_QUIT  disconnect
    CMDF_DATA  command has arbitrary data attached
  .datasz      size of extra data for the command
  .data        arbitrary data, e.g. chat message or copy-paste buffer

Objects use OBJ_t and have:
  type         numeric id for type of the object (items, monsters, etc)
  flags
    OBJF_POS   indicates that the object has a position
    OBJF_VEL   has a velocity
    OBJF_VIS   is visible
    OBJF_HULL  has a hull (physical size)
    OBJF_CLIP  clips with solids
    OBJF_PLAT  is a platform
    OBJF_PVEL  has a player-controlled velocity
    OBJF_DEL   marked for deletion
    OBJF_BND[XZTB] clips with context boundaries X, Z, top, bottom
    OBJF_REFC  has a refcount
  context      which context the object belongs to, e.g. which level or world
  size         size of the data segment
  data         arbitrary data -- see flexers

Main Loop ~

Here's what happens each loop. Note that multiple frames or no frames may be
processed per loop. Each loop does not mean each frame. Not even close.

1. Every main loop, ticks are counted and the current meta-frame (metafr) is
   determined. The metafr matches the wall time.

2. Then we check for events, e.g. window-focus, resizing or input. Input can be
   from keyboards, mice, joysticks.

3. Inputs that are not intercepted (fullscreen toggle, console, quit, kwikbind,
   etc) are buffered by putcmd(). putcmd() stores a simple list of input
   commands that are written to the .cmds of the frame later FIFO. See
   getnextcmd().

4. Idle time is counted here. This is to keep track of how much CPU time is NOT
   being used by the game. This works as long as input-handling code is very
   fast (it is).

5. Now we read the input we buffered and stick it into the frames .cmds list.
   This dirties the frame after hotfr. See advance().

6. Network stuff happens here. If we are a host or a client. See below.

7. Frame processing happens here, using advance(). Frames from hotfr up to
   metafr are recalculated. First the engine does basic movement and clipping,
   then the mod does whatever it needs to do.

8. Rendering. See render(). Boring.

Networking for Host ~

TODOS:
Packet too old or new: notify client by sending blank cmd back (or whatever cmd is appropriate)

Networking for Client ~
